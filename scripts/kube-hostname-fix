#!/bin/bash

# DESCRIPTION
# This script is necessary because kubernetes doesn't set the pod hostname to a
# hostname that's resolvable outside of the pod.  This is done intentionally
# for good reason, however it makes running certain applications difficult
# under kubernetes.  Among these are any application utilizing the erlang
# distribution protocol.
#
# Kubernetes does actually assign pod hostnames that are resolvable within
# KubeDNS and the algorithm is simple enough to calculate from the ip address.
#
# When enabled this script will load a shared library `liboverridehostname` to
# intercept calls to gethostname(2) and sethostname(2). For more information
# see the appropriate repo: https://github.com/joeblackwaslike/overridehostname
# In short, however, this allows the hostname binary to be used as normal. This
# script however is the glue that enables/disables this behavior, and ensures
# that /etc/hosts is properly setup for the new hostname as well.  Additionally
# this script also exports the correct hostname to `HOSTNAME`.
#
# Because this needs to export environment variables into your current session,
# it is recommended to eval it: `eval $(kube-hostname-fix enable)`.  If you
# know what you're doing however, feel free to parse the output yourself.
#
# USAGE:
#   enable:  eval $(kube-hostname-fix enable)
#   disable: eval $(kube-hostname-fix disable)
#
# ARGUMENTS
# action:
#   `enable` or `disable`, required.

base=$(basename $0)
LIB_OVERRIDEHOSTNAME_PATH=/usr/local/lib/liboverridehostname.so.1

# Helpers

function get-ip {
    hostname -I | xargs -n 1 | head -1
}

function get-namespace {
    if [[ -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]]; then
        echo $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    else
        echo "${KUBE_NAMESPACE:=default}"
    fi
}

function get-domain {
    echo "${KUBE_DOMAIN:-cluster.local}"
}

function get-shost {
    get-ip | sed 's/\./-/g'
}

function get-fqdn {
    local ip=$(get-ip)
    local shost=$(get-shost)
    local namespace=$(get-namespace)
    local domain=$(get-domain)
    echo "${shost}.${namespace}.pod.${domain}"
}

function get-hostname {
    if [[ $USE_LONG_HOSTNAME == true || $KUBE_HOSTNAME == 'long' ]]; then
        get-fqdn
    else
        get-shost
    fi
}

function get-orig-hostname {
    uname -n
}

# Actions

function load-module {
    export LD_PRELOAD=$LIB_OVERRIDEHOSTNAME_PATH
    export OVERRIDE_HOSTNAME=true
    echo "export LD_PRELOAD=$LIB_OVERRIDEHOSTNAME_PATH"
    echo "export OVERRIDE_HOSTNAME=true"
}

function unload-module {
    unset LD_PRELOAD OVERRIDE_HOSTNAME
    echo "unset LD_PRELOAD OVERRIDE_HOSTNAME"
}

function set-hostname {
    hostname "$(get-hostname)"
}

function unset-hostname {
    hostname "$(get-orig-hostname)"
}

function set-hostname-env {
    export HOSTNAME=$(hostname)
    echo "export HOSTNAME=$(hostname)"
}

function unset-hostname-env {
    export HOSTNAME=$(get-orig-hostname)
    echo "export HOSTNAME=$(get-orig-hostname)"
}

function write-new-to-etc-hosts {
    local ip=$(get-ip)
    local shost=$(get-shost)
    local fqdn=$(get-fqdn)
    if ! cat /etc/hosts | grep --silent "$shost"; then
        echo "$ip    $fqdn  $shost" >> /etc/hosts
    fi
}

function write-orig-to-etc-hosts {
    local ip=$(get-ip)
    local ohost=$(get-orig-hostname)
    if ! cat /etc/hosts | grep --silent "$ohost"; then
        echo "$ip    $ohost" >> /etc/hosts
    fi
}

function remove-orig-from-etc-hosts {
    # it's really hard writing to the mounted file /etc/hosts
    # correctly under docker.
    echo "$(sed "/$(get-orig-hostname)/d" /etc/hosts)" > /etc/hosts
}

function remove-override-from-etc-hosts {
    # it's really hard writing to the mounted file /etc/hosts
    # correctly under docker.
    echo "$(sed "/$(get-shost)/d" /etc/hosts)" > /etc/hosts
}

# Targets

function enable {
    load-module
    set-hostname
    remove-orig-from-etc-hosts
    write-new-to-etc-hosts
    set-hostname-env
}

function disable {
    unset-hostname
    remove-override-from-etc-hosts
    write-orig-to-etc-hosts
    unset-hostname-env
    unload-module
}

if [ "$1" ]; then
    "$@"
else
    echo "usage: eval \$($base {enable|disable})" >&2
    exit 1
fi
