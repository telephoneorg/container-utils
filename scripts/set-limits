#!/bin/bash -l

readonly SL_FILENAME="$1"
readonly SL_FILEBASE="/etc/security/limits.d"
readonly SL_FULLPATH="${SL_FILEBASE}/${SL_FILENAME}.limits.conf"
declare -A SL_LIMITS_MAP=(
    [core]='c'
    [data]='d'
    [fsize]='f'
    [memlock]='l'
    [nofile]='n'
    [rss]='m'
    [stack]='s'
    [cpu]='t'
    [nproc]='u'
    [as]='v'
    [locks]='x'
    [sigpending]='i'
    [msgqueue]='q'
    [rtprio]='r'
)

# tests

function is-empty {
    local line="$1"
    [[ -z "${line// }" ]]
}

function is-bad-key {
    local key="$1"
    if is-empty "$key" || [[ -z ${SL_LIMITS_MAP[$key]} ]]; then
        if [[ ! $key = 'nice' ]]; then
            sl_bad_keys+=($key)
        fi
        return 0
    else
        return 1
    fi
}

function is-invalid-argument {
    local flag="$1"
    local value="$2"
    local request=$(ulimit $flag $value 2>&1)
    [[ $request =~ 'Invalid argument' ]]
}

function is-operation-not-permitted {
    local flag="$1"
    local value="$2"
    local request=$(ulimit $flag $value 2>&1)
    [[ $request =~ 'Operation not permitted' ]]
}

function is-successful {
    local flag="$1"
    local value="$2"
    ulimit $flag $value > /dev/null 2>&1
}

function get-ulimit-request {
    local flag="$1"
    local value="$2"
    local request=$(ulimit $flag $value 2>&1 | sed 's/.*\(ulimit:.*\)/\1/')
    ulimit $flag $value > /dev/null 2>&1
    local ret_val=$?
    echo "$request"
    return $ret_val
}

function can-set-ulimit {
    local flag="$1"
    local value="$2"
    local request=$(get-ulimit-request $flag $value)
    local err_type
    is-successful $flag $value
}

function can-set-nice {
    local level="$1"
    local current=$(nice)
    if [[ $level -lt $current ]]; then
        if linux::cap::is-disabled 'sys_nice'; then
            return 1
        fi
    fi
}

# helpers

function add-resource-error {
    local flag="$1"
    local value="$2"
    local key _key _val _found
    for _key in "${!SL_LIMITS_MAP[@]}"; do
        _val="${SL_LIMITS_MAP[$_key]}"
        if [[ $_val = ${flag: -1} ]]; then
            _found=true
            key=$_key
            break
        fi
    done
    if [[ $_found = true && ! -z $key ]]; then
        sl_resource_errors[$key]=$(get-ulimit-request $flag $value)
    fi
}

function add-nice-error {
    local level="$1"
    sl_nice_errors+=("$(renice $level $$ 2>&1)")
}

# actions

function set-ulimit {
    local type="$1"
    local key="$2"
    local value="$3"
    if is-bad-key $key; then
        return 1
    fi
    local flag=$(build-ulimit-flag $type $key $value)

    if can-set-ulimit $flag $value; then
        printf '  %-10s : ulimit %-3s %s\n' $key $flag $value
        ulimit $flag $value
    else
        add-resource-error $flag $value
    fi
}

function build-ulimit-flag {
    local type="$1"
    local key="$2"
    local value="$3"

    if is-bad-key $key; then
        log::warn "bad key: $key"
        return 1
    fi

    local flag='-'
    if [[ $type = 'hard' ]]; then
        flag+='H'
    elif [[ $type = 'soft' ]]; then
        flag+='S'
    fi
    flag+=${SL_LIMITS_MAP[$key]}

    if is-invalid-argument $flag $value; then
        oldflag=$flag
        flag=$(printf '%s' "$flag" | sed 's/H\|S//')
    fi
    printf '%s\n' "$flag"
}

function set-nice {
    local level="$1"
    local current=$(nice)
    if is-empty $level; then
        log::warn 'invalid nice level: $level'
        return 1
    fi
    if can-set-nice $level; then
        printf "  priority   : renice $level $$  (%s)\n" "$(renice $level $$)"
    else
        add-nice-error $level
    fi
}

function maybe-show-errors {
    if [[ ${#sl_resource_errors[@]} -gt 0 ]]; then
        log::m-warn "Unable to set the following resource limits: ${!sl_resource_errors[@]}"
        if linux::cap::is-disabled 'sys_resource'; then
            linux::cap::show-warning 'sys_resource'
        fi
    fi

    if [[ ${#sl_nice_errors[@]} -gt 0 ]]; then
        log::m-warn "Unable to renice current process"
        if linux::cap::is-disabled 'sys_nice'; then
            linux::cap::show-warning 'sys_nice'
        fi
    fi

    if [[ ${#sl_bad_keys[@]} -gt 0 ]]; then
        log::m-warn "${#sl_bad_keys[@]} bad ulimits in $SL_FULLPATH: keys: ${sl_bad_keys[@]}"
    fi
}

function usage {
    echo -e "Usage: $(basename $0) {limit-file}

Note: do not include preceding '/etc/security/limits.d/'' or trailing '.limits.conf'
Example: set-limits freeswitch)
"
}

function main {
    local _split _type _key _value _line sl_resource_errors sl_nice_errors
    local sl_bad_keys=()
    local sl_nice_errors=()
    declare -A sl_resource_errors

    if [[ -f $SL_FULLPATH ]]; then
        log::m-info "Applying ulimits from $SL_FULLPATH ..."
        while read -r _line; do
            if is-empty "$_line"; then
                continue
            fi

            _split=($(echo $_line))
            _type=${_split[1]}
            _key=${_split[2]}
            _value=${_split[3]}

            if [[ $_key = 'priority' ]]; then
                set-nice $_value
            else
                set-ulimit $_type $_key $_value
            fi
        done < "$SL_FULLPATH"
        echo
        maybe-show-errors
    fi
}

if [[ -z $SL_FILENAME ]]; then
    usage
    exit 1
elif [[ ! -f $SL_FULLPATH ]]; then
    echo "Invalid path: $SL_FULLPATH, exiting"
    exit 1
else
    main
fi
